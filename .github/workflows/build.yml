name: Build RLDev

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential m4 libpng-dev libsigsegv-dev

        mkdir install_4.8
        cd install_4.8/
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/g++-4.8_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/cpp-4.8_4.8.5-4ubuntu8_amd64.deb 
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libasan0_4.8.5-4ubuntu8_amd64.deb  
        sudo apt install ./gcc-4.8_4.8.5-4ubuntu8_amd64.deb ./gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb ./libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./cpp-4.8_4.8.5-4ubuntu8_amd64.deb ./libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./libasan0_4.8.5-4ubuntu8_amd64.deb ./g++-4.8_4.8.5-4ubuntu8_amd64.deb
        # 设置GCC 4.8为默认编译器
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100

    - name: Check GCC version
      run: |
        gcc --version

    - name: Install OCaml 3.09.3 (from source)
      run: |
        git clone --branch 3.09.3 --depth 1 https://github.com/ocaml/ocaml
        cd ocaml
        # 使用GCC 4.8并添加C99标准和BSD宏定义解决restrict和SIGSTKSZ问题
        ./configure
        make world.opt CC=gcc-4.8
        sudo make install
        cd ..

    # OMake 0.9.6.8 is required, install from source
    - name: Install OMake (from source)
      run: |
        wget http://web.archive.org/web/20070623190729/mojave.metaprl.org/download/omake/omake-0.9.6.8-1.tar.gz -O omake.tar.gz
        tar -xzf omake.tar.gz
        cd omake-0.9.6.8/
        make install
        cd ..

    - name: Install OCaml Libraries
      run: |
        echo "Installing Findlib..."
        wget http://download.camlcity.org/download/findlib-1.2.1.tar.gz -O findlib.tar.gz
        tar -xzf findlib.tar.gz
        cd findlib-1.2.1
        ./configure
        make all opt install
        cd ..
        echo "Findlib installed."

        echo "Installing ExtLib..."
        wget https://downloads.sourceforge.net/project/ocaml-lib/extlib/extlib-1.4/extlib-1.4.tgz -O extlib.tgz
        tar -xzf extlib.tgz
        cd extlib-1.4
        # Use heredoc to provide input to install.ml
        ocaml install.ml <<EOF
        2
        N
        EOF
        cd ..
        echo "ExtLib installed."

        echo "Installing Ulex..."
        wget http://www.cduce.org/download/old/ulex-0.8.tar.gz -O ulex.tar.gz
        tar -xzf ulex.tar.gz
        cd ulex-0.8
        make all.opt install
        cd ..
        echo "Ulex installed."

        echo "Installing XML-Light..."
        wget http://tech.motion-twin.com/zip/xml-light-2.2.zip -O xml-light.zip
        unzip xml-light.zip
        cd xml-light
        # Keep running make install until it succeeds (as per Baka-Tsuki guide)
        until make install; do echo "Retrying make install for xml-light..."; sleep 1; done
        cd ..
        echo "XML-Light installed."

    - name: Configure RLDev
      run: |
        cd src
        ./configure --encoding=UTF8

    - name: Build RLDev
      run: |
        cd src
        omake

    - name: List bin directory contents
      run: ls -R bin

    # Optional: Upload artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rldev-linux-build
        path: bin # Upload the entire bin directory